version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dogu_app
    restart: unless-stopped
    # logging: # Loki 로깅 드라이버 제거
    #   driver: loki
    #   options:
    #     loki-url: "http://loki:3100/loki/api/v1/push"
    #     loki-retries: "5"
    #     loki-batch-size: "400"
    labels:
      # Promtail이 이 컨테이너의 로그를 수집하도록 라벨 추가
      - "logging=promtail"
      - "logging_jobname=containerlogs"
    # TODO: Configure application to send traces to Tempo (OTLP exporter)
    # TODO: Configure application or an exporter to send metrics to Mimir (Prometheus remote write)

  caddy:
    image: caddy:2.7-alpine
    container_name: dogu_caddy
    ports:
      - "8080:8080"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - app
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.5 # 최신 버전 확인 권장
    container_name: dogu_loki
    ports:
      - "3100:3100" # Loki API 포트
    command: -config.file=/etc/loki/local-config.yaml # 기본 설정 사용
    restart: unless-stopped
    # Loki 데이터 저장을 위한 볼륨 (필요시)
    # volumes:
    #   - loki_data:/loki

  tempo:
    image: grafana/tempo:2.4.1 # 최신 버전 확인 권장
    container_name: dogu_tempo
    ports:
      # Tempo가 수신할 포트들 (OTLP 기본 포트)
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
      - "14268:14268" # Jaeger thrift http
      - "3200:3200"   # Tempo API (Grafana 연동용)
    command: -search.enabled=true # Grafana에서 검색 기능 활성화
    restart: unless-stopped
    # Tempo 데이터 저장을 위한 볼륨 (필요시)
    # volumes:
    #   - tempo_data:/tmp/tempo

  mimir:
    image: grafana/mimir:latest # 이미지 태그를 latest로 변경
    container_name: dogu_mimir
    volumes:
      - ./config/mimir.yaml:/etc/mimir.yaml
      # Mimir 데이터 저장을 위한 볼륨 (필수)
      - mimir_data:/data/mimir
    ports:
      - "9009:9009" # Mimir HTTP API (Grafana 연동 및 remote_write 수신)
      - "9095:9095" # Mimir gRPC (내부 통신용)
    entrypoint:
      - /bin/mimir
      - -config.file=/etc/mimir.yaml
      - -target=all # 모든 컴포넌트 실행 (단일 인스턴스 모드)
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.2 # 최신 버전 확인 권장
    container_name: dogu_grafana
    ports:
      - "3000:3000" # Grafana 웹 UI 포트
    volumes:
      # Grafana 데이터베이스 및 설정 저장을 위한 볼륨
      - grafana_data:/var/lib/grafana
      # 데이터 소스 프로비저닝 설정 마운트
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      # 기본 관리자 비밀번호 설정 (변경 권장)
      - GF_SECURITY_ADMIN_PASSWORD=admin
      # 익명 접속 비활성화 (기본값)
      - GF_AUTH_ANONYMOUS_ENABLED=false
      # Tempo, Loki 등 연동 설정
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor tempoSearch traceToMetrics tempoBackendSearch lokiLogsPanel lokiMonacoEditor lokiQuerySplitting lokiLive lokiMetricLabelSelectors lokiDataframeApi lokiAsyncQueryDataSupport
    depends_on:
      - loki
      - tempo
      - mimir
    restart: unless-stopped

# Docker 볼륨 정의
volumes:
  caddy_data: {}
  caddy_config: {}
  grafana_data: {}
  mimir_data: {}
  # loki_data: {}
  # tempo_data: {}

# Promtail 서비스 추가
# promtail:
#   image: grafana/promtail:2.9.5 # Loki와 버전 맞추는 것 권장
#   container_name: dogu_promtail
#   volumes:
#     - ./config/promtail-config.yaml:/etc/promtail/config.yaml
#     # Docker 소켓 또는 컨테이너 로그 경로 마운트 (nerdctl 환경 고려 필요)
#     # nerdctl 환경에서는 /var/log 마운트가 일반적이지 않을 수 있음.
#     # 여기서는 Docker API scraping 방식을 우선 시도.
#     - /var/run/docker.sock:/var/run/docker.sock # Docker API 접근용 (nerdctl 환경에서 작동 여부 확인 필요)
#     # 또는 컨테이너 로그 파일 경로 직접 마운트 시도
#     # - /var/lib/docker/containers:/var/lib/docker/containers:ro
#   command: -config.file=/etc/promtail/config.yaml
#   depends_on:
#     - loki
#   restart: unless-stopped 